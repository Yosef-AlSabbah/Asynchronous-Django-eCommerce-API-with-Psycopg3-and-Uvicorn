"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

from .config import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = settings.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = settings.DEBUG

ALLOWED_HOSTS = settings.ALLOWED_HOSTS

# Application definition

# Django built-in apps
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

# Third-party apps
THIRD_PARTY_APPS = [
    'taggit',  # Tags for Django models
    'rest_framework',  # For API building
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',  # JWT token blacklist for security
    'drf_spectacular',  # For OpenAPI schema generation
    'adrf',
    'debug_toolbar', # Debugging tool for development
]

# Custom (local) apps
CUSTOM_APPS = [
    'accounts.apps.AccountsConfig',
    'auditlog.apps.AuditlogConfig',
    'shop.apps.ShopConfig',  # Our shop application
    'dynamic_config.apps.DynamicConfigConfig',  # Dynamic configuration management
    'api.apps.ApiConfig',  # API application
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + CUSTOM_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    # Custom middleware for audit logging
    'auditlog.middleware.AuditLogMiddleware',
    # 'signature_auth.middleware.SignatureAuthenticationMiddleware',
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": settings.POSTGRES_NAME,
        "USER": settings.POSTGRES_USER,
        "PASSWORD": settings.POSTGRES_PASSWORD,
        "HOST": settings.POSTGRES_HOST,
        "PORT": "5432",
        # Add this connection parameter for proper async support
        'CONN_MAX_AGE': 0,  # Recommended for async operation
    }
}

get_redis_url = lambda db_index: (
    f"redis://:{settings.REDIS_PASSWORD}"
    f"@{settings.REDIS_HOST}:{settings.REDIS_PORT}/{db_index}"
)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": get_redis_url(db_index=0),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

CELERY_BROKER_URL = get_redis_url(db_index=1)
CELERY_RESULT_BACKEND = get_redis_url(db_index=1)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Media files configuration for product images
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Image specifications for products
PRODUCT_IMAGE_MIN_RESOLUTION = (300, 300)  # Minimum resolution for product images
PRODUCT_IMAGE_MAX_RESOLUTION = (1920, 1080)  # Maximum resolution for product images
PRODUCT_IMAGE_MAX_SIZE = 1 * 1024 * 1024  # 2MB max size
PRODUCT_IMAGE_FORMATS = ['JPEG', 'PNG']  # Allowed image formats

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "accounts.User"  # Custom user model

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'EXCEPTION_HANDLER': 'core.core.exceptions.custom_exception_handler',
    'DEFAULT_PAGINATION_CLASS': 'core.utils.pagination.CustomPageNumberPagination',
    'DEFAULT_RENDERER_CLASSES': [
        'core.core.renderers.ApiResponseRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '400/day',
        'user': '1000/day',
    },
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
}

SIGNATURE_AUTH_SECRET_KEY = settings.SIGNATURE_AUTH_SECRET_KEY

AUTHENTICATION_BACKENDS = [
    'accounts.auth_backends.UsernameOrPhoneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

#      ╭────────────────────────────���─────────────────────────────╮
#      │       Configuration for JWT Authentication Tokens        │
#      ╰──────────────────────────────────────────────────────────╯
# ━━ THIS SECTION SETS THE DURATION FOR BOTH ACCESS AND REFRESH TOKENS IN THE APPLICATION, USING THE SIMPLE_JWT SETTINGS. ━━
SIMPLE_JWT = {
    # Sets the lifespan of the access token.
    # After 15 minutes, the access token will expire, requiring the user to use the refresh token to obtain a new access token.
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),  # 1 months

    # Sets the lifespan of the refresh token.
    # After 7 days, the refresh token will expire, requiring the user to re-authenticate to get a new refresh token.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3 * 30),  # 3 months

    # Defines the class used for authentication tokens, specifying AccessToken here
    # as the type of token used by Simple JWT.
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),

    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
            'description': "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        }
    },
    'USE_SESSION_AUTH': False,
}

INTERNAL_IPS = [
    settings.INTERNAL_IPS,  # Allows internal IPs for debugging
]

# DRF Spectacular settings for OpenAPI schema and Swagger UI
SPECTACULAR_SETTINGS = {
    'TITLE': 'eCommerce API',
    'DESCRIPTION': 'API for eCommerce platform with asynchronous support',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.contrib.adrf.SpectacularADRFSchema', # Add this line for ADRF compatibility
    'SCHEMA_PATH_PREFIX': r'/api/v[0-9]',
    'COMPONENT_SPLIT_REQUEST': True,
    'TAGS': [
        {
            'name': 'Product Status',
            'description': 'Endpoints for managing product statuses.'
        },
        {
            'name': 'User Management',
            'description': 'Endpoints for managing user profiles, accounts, and related data.'
        },
        {
            'name': 'User Authentication',
            'description': 'Endpoints for user login, logout, and authentication.'
        },
        {
            'name': 'Account Linking',
            'description': 'Endpoints for linking web and Telegram accounts to user profiles.'
        },
        {
            'name': 'Payments',
            'description': 'Endpoints for processing and managing payments.'
        },
        {
            'name': 'Orders',
            'description': 'Endpoints for managing customer orders and order details.'
        },
        {
            'name': 'Products',
            'description': 'Endpoints for managing product listings and inventory.'
        },
        {
            'name': 'Categories',
            'description': 'Endpoints for managing product categories.'
        },
        {
            'name': 'Chat',
            'description': 'Endpoints for real-time communication and chat functionality.'
        },
        {
            'name': 'Cart',
            'description': 'Endpoints for managing the shopping cart.'
        },
        {
            'name': 'Reviews',
            'description': 'Endpoints for managing product reviews.'
        },
        {
            'name': 'Wishlist',
            'description': 'Endpoints for managing user wishlists.'
        },
        {
            'name': 'System Configuration',
            'description': 'Endpoints for system-wide configuration and settings.'
        }
    ],
}

CONFIG_CACHE_TIMEOUT = settings.CONFIG_CACHE_TIMEOUT

GENERIC_CACHE_TIMEOUT = settings.GENERIC_CACHE_TIMEOUT